/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.github.automator.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.github.automator.model.GHAutomatorRepository;
import com.liferay.github.automator.model.GHAutomatorRepositoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GHAutomatorRepository service. Represents a row in the &quot;GHAutomatorRepository&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GHAutomatorRepositoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GHAutomatorRepositoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GHAutomatorRepositoryImpl
 * @see GHAutomatorRepository
 * @see GHAutomatorRepositoryModel
 * @generated
 */
@ProviderType
public class GHAutomatorRepositoryModelImpl extends BaseModelImpl<GHAutomatorRepository>
	implements GHAutomatorRepositoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g h automator repository model instance should use the {@link GHAutomatorRepository} interface instead.
	 */
	public static final String TABLE_NAME = "GHAutomatorRepository";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "ghAutomatorRepositoryId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "ghRepositoryId", Types.VARCHAR },
			{ "enabled", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ghAutomatorRepositoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ghRepositoryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("enabled", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table GHAutomatorRepository (uuid_ VARCHAR(75) null,ghAutomatorRepositoryId LONG not null primary key,userId LONG,createDate DATE null,ghRepositoryId VARCHAR(75) null,enabled BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table GHAutomatorRepository";
	public static final String ORDER_BY_JPQL = " ORDER BY ghAutomatorRepository.ghAutomatorRepositoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GHAutomatorRepository.ghAutomatorRepositoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.github.automator.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.github.automator.model.GHAutomatorRepository"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.github.automator.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.github.automator.model.GHAutomatorRepository"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.github.automator.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.github.automator.model.GHAutomatorRepository"),
			true);
	public static final long ENABLED_COLUMN_BITMASK = 1L;
	public static final long GHREPOSITORYID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long GHAUTOMATORREPOSITORYID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.github.automator.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.github.automator.model.GHAutomatorRepository"));

	public GHAutomatorRepositoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ghAutomatorRepositoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGhAutomatorRepositoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ghAutomatorRepositoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GHAutomatorRepository.class;
	}

	@Override
	public String getModelClassName() {
		return GHAutomatorRepository.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("ghAutomatorRepositoryId", getGhAutomatorRepositoryId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("ghRepositoryId", getGhRepositoryId());
		attributes.put("enabled", getEnabled());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long ghAutomatorRepositoryId = (Long)attributes.get(
				"ghAutomatorRepositoryId");

		if (ghAutomatorRepositoryId != null) {
			setGhAutomatorRepositoryId(ghAutomatorRepositoryId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String ghRepositoryId = (String)attributes.get("ghRepositoryId");

		if (ghRepositoryId != null) {
			setGhRepositoryId(ghRepositoryId);
		}

		Boolean enabled = (Boolean)attributes.get("enabled");

		if (enabled != null) {
			setEnabled(enabled);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getGhAutomatorRepositoryId() {
		return _ghAutomatorRepositoryId;
	}

	@Override
	public void setGhAutomatorRepositoryId(long ghAutomatorRepositoryId) {
		_ghAutomatorRepositoryId = ghAutomatorRepositoryId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public String getGhRepositoryId() {
		if (_ghRepositoryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _ghRepositoryId;
		}
	}

	@Override
	public void setGhRepositoryId(String ghRepositoryId) {
		_columnBitmask |= GHREPOSITORYID_COLUMN_BITMASK;

		if (_originalGhRepositoryId == null) {
			_originalGhRepositoryId = _ghRepositoryId;
		}

		_ghRepositoryId = ghRepositoryId;
	}

	public String getOriginalGhRepositoryId() {
		return GetterUtil.getString(_originalGhRepositoryId);
	}

	@Override
	public boolean getEnabled() {
		return _enabled;
	}

	@Override
	public boolean isEnabled() {
		return _enabled;
	}

	@Override
	public void setEnabled(boolean enabled) {
		_columnBitmask |= ENABLED_COLUMN_BITMASK;

		if (!_setOriginalEnabled) {
			_setOriginalEnabled = true;

			_originalEnabled = _enabled;
		}

		_enabled = enabled;
	}

	public boolean getOriginalEnabled() {
		return _originalEnabled;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GHAutomatorRepository.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GHAutomatorRepository toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GHAutomatorRepository)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GHAutomatorRepositoryImpl ghAutomatorRepositoryImpl = new GHAutomatorRepositoryImpl();

		ghAutomatorRepositoryImpl.setUuid(getUuid());
		ghAutomatorRepositoryImpl.setGhAutomatorRepositoryId(getGhAutomatorRepositoryId());
		ghAutomatorRepositoryImpl.setUserId(getUserId());
		ghAutomatorRepositoryImpl.setCreateDate(getCreateDate());
		ghAutomatorRepositoryImpl.setGhRepositoryId(getGhRepositoryId());
		ghAutomatorRepositoryImpl.setEnabled(getEnabled());

		ghAutomatorRepositoryImpl.resetOriginalValues();

		return ghAutomatorRepositoryImpl;
	}

	@Override
	public int compareTo(GHAutomatorRepository ghAutomatorRepository) {
		long primaryKey = ghAutomatorRepository.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GHAutomatorRepository)) {
			return false;
		}

		GHAutomatorRepository ghAutomatorRepository = (GHAutomatorRepository)obj;

		long primaryKey = ghAutomatorRepository.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GHAutomatorRepositoryModelImpl ghAutomatorRepositoryModelImpl = this;

		ghAutomatorRepositoryModelImpl._originalUuid = ghAutomatorRepositoryModelImpl._uuid;

		ghAutomatorRepositoryModelImpl._originalGhRepositoryId = ghAutomatorRepositoryModelImpl._ghRepositoryId;

		ghAutomatorRepositoryModelImpl._originalEnabled = ghAutomatorRepositoryModelImpl._enabled;

		ghAutomatorRepositoryModelImpl._setOriginalEnabled = false;

		ghAutomatorRepositoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GHAutomatorRepository> toCacheModel() {
		GHAutomatorRepositoryCacheModel ghAutomatorRepositoryCacheModel = new GHAutomatorRepositoryCacheModel();

		ghAutomatorRepositoryCacheModel.uuid = getUuid();

		String uuid = ghAutomatorRepositoryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ghAutomatorRepositoryCacheModel.uuid = null;
		}

		ghAutomatorRepositoryCacheModel.ghAutomatorRepositoryId = getGhAutomatorRepositoryId();

		ghAutomatorRepositoryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ghAutomatorRepositoryCacheModel.createDate = createDate.getTime();
		}
		else {
			ghAutomatorRepositoryCacheModel.createDate = Long.MIN_VALUE;
		}

		ghAutomatorRepositoryCacheModel.ghRepositoryId = getGhRepositoryId();

		String ghRepositoryId = ghAutomatorRepositoryCacheModel.ghRepositoryId;

		if ((ghRepositoryId != null) && (ghRepositoryId.length() == 0)) {
			ghAutomatorRepositoryCacheModel.ghRepositoryId = null;
		}

		ghAutomatorRepositoryCacheModel.enabled = getEnabled();

		return ghAutomatorRepositoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", ghAutomatorRepositoryId=");
		sb.append(getGhAutomatorRepositoryId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", ghRepositoryId=");
		sb.append(getGhRepositoryId());
		sb.append(", enabled=");
		sb.append(getEnabled());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.github.automator.model.GHAutomatorRepository");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ghAutomatorRepositoryId</column-name><column-value><![CDATA[");
		sb.append(getGhAutomatorRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ghRepositoryId</column-name><column-value><![CDATA[");
		sb.append(getGhRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enabled</column-name><column-value><![CDATA[");
		sb.append(getEnabled());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GHAutomatorRepository.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GHAutomatorRepository.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _ghAutomatorRepositoryId;
	private long _userId;
	private Date _createDate;
	private String _ghRepositoryId;
	private String _originalGhRepositoryId;
	private boolean _enabled;
	private boolean _originalEnabled;
	private boolean _setOriginalEnabled;
	private long _columnBitmask;
	private GHAutomatorRepository _escapedModel;
}